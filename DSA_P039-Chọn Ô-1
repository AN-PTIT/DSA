#include<bits/stdc++.h>
using namespace std;
const int MAX = 20;
int dp[MAX][1<<MAX],a[MAX][MAX],n;
int solve(int i,int mask){
    if (i==n) return 0;
    if (dp[i][mask]!=-1) return dp[i][mask];
    int ans=0;
    for (int j=0;j<n;j++){
        if ((mask>>j)&1) continue;
        ans=max(ans,a[i][j]+solve(i+1,mask|(1<<j)));
    }
    return dp[i][mask]=ans;
}
int main(){
    int t;cin>>t;
    while(t--){
        cin>>n;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                cin>>a[i][j];
        memset(dp,-1,sizeof dp);
        cout <<solve(0,0)<<endl;
    }
    return 0;
}

//----------
//#include<bits/stdc++.h>
//using namespace std;
//const int MOD=1e9+7;
//#define bit(i,n) (n>>i&1)
//#define maxn 20
//int n,a[maxn][maxn],dp[maxn][1 << maxn];
//signed main(){
//    int tc; cin>>tc;
//    while (tc--){
//        cin>>n;
//        for (int i=0;i<n;i++) 
//            for (int j=0;j<n;j++) cin>>a[i][j];
//        for (int i=0;i<n;i++)
//            for (int j=0;j<(1<<n);j++) dp[i][j] = 0;
//        for (int i=0;i<n;i++)
//            for (int mask = 1;mask < (1<<n);mask++)
//                if (__builtin_popcount(mask) == i+1){
//                    for (int j=0;j<n;j++)
//                        if (bit(j,mask)){
//                            int pre_mask = mask - (1<<j);
//                            if (pre_mask == 0) dp[i][mask] = a[j][i];
//                            else
//                                dp[i][mask] = max(dp[i][mask], dp[i-1][pre_mask] + a[j][i]);
//                        }
//                }
//        cout<<dp[n-1][(1<<n)-1]<<"\n";
//    }
//}
